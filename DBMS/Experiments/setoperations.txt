
# Experiment 7: Implementing Set Operations in SQL

## Aim:
To understand and implement various set operations in SQL including Union, Set Difference, Intersect, and Cross Product.

## Database Tables:

### Table A:
```
E_ID  E_NAME  DEPARTMENT_ID
-----  ------  -------------
101   Ram     1
102   Shyam   2
103   Mohan   3
104   Sohan   4
```

### Table B:
```
E_ID  E_NAME  DEPARTMENT_ID
-----  ------  -------------
103   Mohan   3
104   Sohan   4
105   Aryan   5
106   Ramesh  6
```

---

## 1. Union Operation

### Description:
Combines rows from both tables and removes duplicates.

### Query:
```sql
SELECT * FROM a 
UNION 
SELECT * FROM b;
```

### Result:
```
E_ID  E_NAME  DEPARTMENT_ID
-----  ------  -------------
101   Ram     1
102   Shyam   2
103   Mohan   3
104   Sohan   4
105   Aryan   5
106   Ramesh  6
```

### Explanation:
- Combines all unique rows from both tables
- Duplicate rows (103-Mohan-3 and 104-Sohan-4) appear only once

---

## 2. Set Difference (MINUS)

### Description:
Returns rows that exist in the first table but not in the second table.

### Query:
```sql
SELECT * FROM a 
MINUS 
SELECT * FROM b;
```

### Result:
```
E_ID  E_NAME  DEPARTMENT_ID
-----  ------  -------------
101   Ram     1
102   Shyam   2
```

### Explanation:
- Returns only rows from Table A that don't exist in Table B
- 103-Mohan-3 and 104-Sohan-4 are excluded as they exist in both tables

---

## Additional Set Operations (Implied from Aim):

### 3. Intersect Operation

#### Description:
Returns only rows that exist in both tables.

#### Query:
```sql
SELECT * FROM a 
INTERSECT 
SELECT * FROM b;
```

#### Expected Result:
```
E_ID  E_NAME  DEPARTMENT_ID
-----  ------  -------------
103   Mohan   3
104   Sohan   4
```

---

### 4. Cross Product (Cartesian Product)

#### Description:
Returns all possible combinations of rows from both tables.

#### Query:
```sql
SELECT * FROM a 
CROSS JOIN b;
```

#### Expected Result (partial):
```
a.E_ID a.E_NAME a.DEPARTMENT_ID b.E_ID b.E_NAME b.DEPARTMENT_ID
-----  -------  --------------  -----  -------  --------------
101    Ram      1               103    Mohan    3
101    Ram      1               104    Sohan    4
101    Ram      1               105    Aryan    5
... (16 rows total) ...
```

---

## Key Takeaways:
1. **UNION**: Combines results from multiple queries and removes duplicates
2. **MINUS (EXCEPT in some databases)**: Shows difference between two result sets
3. **INTERSECT**: Finds common elements between two result sets
4. **CROSS JOIN**: Produces Cartesian product of all rows from joined tables

Note: Syntax may vary slightly between database systems (Oracle uses MINUS, while others may use EXCEPT).

# Experiment 7: SQL Set Operations (Continued)

## 3. Intersect Operation

### Query:
```sql
SELECT * FROM a INTERSECT SELECT * FROM b;
```

### Result:
```
E_ID  E_NAME  DEPARTMENT_ID
-----  ------  -------------
103   Mohan   3
104   Sohan   4
```

### Explanation:
- Returns only rows that exist in both Table A and Table B
- Shows common employees (Mohan and Sohan) who appear in both tables

## 4. Cross Product (Cartesian Product)

### Query:
```sql
SELECT * FROM a CROSS JOIN b;
```

### Result:
```
A.E_ID A.E_NAME A.DEPARTMENT_ID B.E_ID B.E_NAME B.DEPARTMENT_ID
-----  -------  --------------  -----  -------  --------------
101    Ram      1               103    Mohan    3
101    Ram      1               104    Sohan    4
101    Ram      1               105    Aryan    5
101    Ram      1               106    Ramesh   6
102    Shyam    2               103    Mohan    3
102    Shyam    2               104    Sohan    4
102    Shyam    2               105    Aryan    5
102    Shyam    2               106    Ramesh   6
103    Mohan    3               103    Mohan    3
103    Mohan    3               104    Sohan    4
103    Mohan    3               105    Aryan    5
103    Mohan    3               106    Ramesh   6
104    Sohan    4               103    Mohan    3
104    Sohan    4               104    Sohan    4
104    Sohan    4               105    Aryan    5
104    Sohan    4               106    Ramesh   6
```

### Explanation:
- Combines each row from Table A with every row from Table B
- Produces 16 rows (4 rows in A Ã— 4 rows in B)
- Useful for creating all possible combinations between two tables

## Key Observations:
1. **Intersect** is valuable for finding common records between datasets
2. **Cross Join** generates a complete combination of all rows
3. The number of rows in cross join equals the product of rows in both tables
4. These operations are fundamental for data analysis and comparison tasks
