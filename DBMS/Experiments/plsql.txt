Experiment 9

Aim: Study of PL/SQL.

PL/SQL: Stands for Procedural Language/Structured Query Language. It is a block-structured language developed by Oracle that allows developers to combine the power of SQL with procedural programming constructs. The PL/SQL language enables efficient data manipulation and control-flow logic, all within the Oracle Database.

History:

* Early 1980s - SQL becomes the standard for database management.
* 1992 - PL/SQL as an extension to SQL, adding procedural capabilities.
* Mid-1990s - PL/SQL becomes used for writing stored procedures, triggers, functions.
* 2000s - PL/SQL is adopted in enterprise applications and databases.
* 2010s-Present - Oracle continues to enhance PL/SQL with new features and optimizations for cloud and performance.

Need of PL/SQL:

* Nature: SQL is declarative, focusing on what needs to be done, while PL/SQL is procedural, specifying how tasks should be executed.
* Execution: SQL executes as a single query or statement, whereas PL/SQL runs as a block of code with multiple statements.
* Purpose: SQL is used for data manipulation and schema operations, while PL/SQL is used for creating complete applications with procedures, functions, and logic.
* Focus: SQL primarily manipulates and queries data, while PL/SQL builds complex application logic directly within the database.

Features of SQL:

* It is basically a procedural language, which provides the functionality of decision-making, iteration, and many more features of procedural programming languages.
* PL/SQL can execute a number of queries in one block using single command.
* One can create a PL/SQL unit such as procedures, functions, packages, triggers, and types, which are stored in the database for reuse by applications.
* PL/SQL provides a feature to handle the exception which occurs in PL/SQL block known as exception handling block.
* Applications written in PL/SQL are portable to computer hardware or operating system where Oracle is operational.
* PL/SQL Offers extensive error checking.


# Structure of PL/SQL block:
```
DECLARE
    Declaration statements;
BEGIN
    Executable statements
EXCEPTIONS
    Exception handling statements
END;
```

## PL/SQL identifiers:
Identifiers in PL/SQL are names used to represent various elements like variables, constants, procedures, functions, and more. They must follow these rules:
- Start with a letter (A-Z, a-z) or an underscore (_).
- Can contain letters, numbers, and underscores.
- Cannot exceed 30 characters.
- Cannot be reserved keywords (e.g., SELECT, INSERT, etc.).

## TRIGGER IN PL/SQL:
A trigger in PL/SQL is a stored procedure that automatically executes (or "fires") when a specific event occurs in the database, such as an INSERT, UPDATE, or DELETE operation on a table or view. Types of Triggers:
- BEFORE Trigger: Executes before the triggering event (insert, update, delete).
- AFTER Trigger: Executes after the triggering event.
- INSTEAD OF Trigger: Used for views to replace the default action by custom logic.

Example: We want to create a trigger that automatically logs changes (inserts) into a log_table whenever a new record is inserted into the employees table.

```
CREATE OR REPLACE TRIGGER log_employee_insert
AFTER INSERT ON employees
FOR EACH ROW
BEGIN
    INSERT INTO log_table (log_message, log_date)
    VALUES ('New employee inserted: ' || :NEW.employee_name, SYSDATE);
END;
```
This image shows information about PL/SQL functions and stored procedures:

## FUNCTIONS IN PL/SQL:
A function in PL/SQL is a stored subprogram that returns a single value. It can be used to perform calculations, manipulate data, or return computed values based on input parameters.

Example: Function to Calculate Area of a Rectangle
```
CREATE OR REPLACE FUNCTION calculate_area (
    length IN NUMBER,
    width IN NUMBER
)
RETURN NUMBER
IS
    area NUMBER;
BEGIN
    area := length * width;
    RETURN area;
END;
```

## STORED PROCEDURE IN PL/SQL:
A stored procedure in PL/SQL is a named, precompiled collection of one or more SQL statements and PL/SQL code that can be executed to perform a specific task. It is stored in the database and can be invoked by applications, scripts, or other PL/SQL blocks.

Example: Stored Procedure to Update Employee Salary
```
CREATE OR REPLACE PROCEDURE update_salary (
    emp_id IN NUMBER,
    new_salary IN NUMBER
)
IS
BEGIN
    UPDATE employees
    SET salary = new_salary
    WHERE employee_id = emp_id;
    COMMIT;
END;
```







Here is the extracted text from the image:

---

DIFFERENCE BETWEEN FUNCTION AND STORED PROCEDURE:

A function always returns a value using the return statement while a procedure may return one or more values through parameters or may not return at all. Although, OUT parameters can still be used in functions, they are not advisable neither are there cases where one might find a need to do so. Using OUT parameter restricts a function from being used in a SQL Statement.

Functions can be used in typical SQL statements like SELECT, INSERT, UPDATE, DELETE, MERGE, while procedures can’t.

Functions are normally used for computations where as procedures are normally used for executing business logic.

Oracle provides the provision of creating “Function Based Indexes” to improve the performance of the subsequent SQL statement. This applies when performing the function on an indexed column in where clause of a query.

---



